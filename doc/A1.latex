\subsection{Server minimalism}
The best way to learn is to remove all distractions, so let's stick with the bare-bear necessities first.
In this example we merely create an \textit{instance} of the \gls{p2pserver}, \textit{start} it and stop it again. Not very useful, but it's the start of something great, promise!

By \textit{starting} we mean that the \verb|UDP| and \verb|TCP| listener sockets are opened, upon which the server will: 
\begin{itemize}
	\item wait for connections
	\item be able to connect to other \gls{nodep2p}
\end{itemize}

\begin{lstlisting}[caption=A1\_Server.go - Make a new private key,firstnumber=13]
privkey, err := crypto.GenerateKey()
if err != nil {
	demo.Log.Crit("Generate private key failed", "err", err)
}
\end{lstlisting}
The first step is to create the \acrshort{node}'s \textit{private key}. The public key derived from it will be the public identity of the \acrshort{node}. Don't worry; the private key is generated by random, chosen from a range of numbers greater than the particle count of the entire universe. It will be quite unique.

\begin{lstlisting}[caption=A1\_Server.go - Set up server,firstnumber=19]
cfg := p2p.Config{
	PrivateKey: privkey,
	Name:       common.MakeName("foo", "42"),
}
srv := p2p.Server{
	Config: cfg,
}
\end{lstlisting}
The private key is passed to the server's configuration, along with an arbitrary \textit{name}, usually made up by an identifier describing its codebase, architecture and version number.
The name has no practical significance in the scope of our tutorials, but it is a required field, and kind of polite to take seriously.
There are plenty of other settings under the hood of the \gls{p2pserver}. Luckily, all of them will receive nice default values when we fire things up.

\begin{lstlisting}[caption=A1\_Server.go - Start. Verify. Stop,firstnumber=27]
// attempt to start the server
err = srv.Start()
if err != nil {
	demo.Log.Crit("Start p2p.Server failed", "err", err)
}

// inspect the resulting values
nodeinfo := srv.NodeInfo()
demo.Log.Info("server started", "enode", nodeinfo.Enode, "name", nodeinfo.Name,
"ID", nodeinfo.ID, "IP", nodeinfo.IP)

// bring down the server
srv.Stop()
\end{lstlisting}
\textbf{The moment of truth.}
If your computer doesn't blow up before then, you should see a log line in your console showing you some basic information about your running server, along the lines of\footnote{we will be truncating long hex strings in these tutorials. This is your last and final warning}:

\scriptsize
\begin{verbatim}
	INFO [06-24|22:12:49] server started                           demolog=* enode=enode://92f6fa82[\ldots]dc0912ba@[::]:46851
	name=foo/v42/linux/go1.8.3 ID=92f6fa82[\ldots]dc0912ba IP=:: caller=A1\_Server.go:32
\end{verbatim}
\normalsize

An IP address has now been awarded to us, which spells good news for future connectivity. Fair enough, the IP field here merely cites the somewhat cryptic ``::'', but this is shorthand for \verb|localhost| so we're good. 

The two fields of special interest to us are the \texttt{ID} and the \texttt{\gls{enode}}. See how they contain nearly the same thing? Or rather, how the \texttt{\gls{enode}} contains the \texttt{ID} and a bit more? Here's how the entities we've met so far fit together:

\begin{description}
	\item[server] Holds a private key and controls ip connections.
	\item[ID] The one-of-a-kind public key of the \gls{p2pserver}, derived from its private key (the one we made up in the start of the example).
	\item[enode] An uri-string that is used when you want to tell a \gls{p2pserver} who to connect to, made up of the server's ID (more on that next) along with the IP address and port number of the node.
\end{description}
Of course, every time a \gls{p2pserver} starts up it might have a different address or port, so we need to know about those to reach out to it at all. But we also want to make sure that the connection actually is for the \acrshort{node} in question, and not some other shady node that popped up on that address and port in the meantime. Therefore we also include the public key. And if the public key doesn't match, no soup for you.

